Воспроизведение видео из архива.

Далее "абсолютное время" - это календарное время с точностью до секунд,
аналогично unixtime.

Формат хранения данных в архиве:
1. Видео разбивается на файлы одинаковой продолжительности по абсолютному времени.
   Файлы раскладываются по директориям год/месяц/день/час/минута/.
2. Цель раскладки по директориям - оптимизация поиска нужного файла (индекс) и
   удобство ручной навигации.
3. Соответствие unixtime <-> имя файла - однозначное.
4. В архиве возможны наложения, т е одному и тому же unixtime может
   соответствовать несколько видеофрагментов (перевод часов на сервере).
   Как с этим работать?

   Существует очевидный хронологический порядок кадров, который не хочется
   нарушать при наложениях. Т е существует логичное прямое направление показа.
   Длительность записи, попадающей в некоротый временной интервал, может
   быть больше этого временного интервала.

   Принцип неотхода назад означает, что и при хранении данных логично было бы
   учитывать такие наложения. Один из вариантов - нумеровать полученные кадры.
   (это и есть их естественный порядок).

   В запрошенный интервал попадают все фрагменты от 1-го с нужным таймстемпом
   до последнего, даже если между ними находятся кадры с таймстемпами вне
   запрошенного интервала.

   Допустим, что я запросил отрезок видео с 6 до 8, и при этом в 7 часов часы
   были переведены на 2 часа назад. По часам в интервал должны попасть кадры,
   относящиеся к 5-му часу.

   5 6 7 8
   5 6 7 5 6 7 8
   5 6 7 5 <- в этот момент при получении видео из интервала с 6 до 7
              нет возможности узнать, что есть обратное наложение.
              ...есть такая возможность, если в 7 записать, что обнаружен
              перевод часов и выполнен сдвиг. После сдвига нужно
              писать видео в смещённый файл 5_a, либо просто продолжать
              писать в 7, искуственно увеличивая его размер.
              В этом случае считаем, что перевод часов нарушает навигацию
              по архиву, но радикальных изменений не вносит.
              (основная цель - сделать систему устойчивой к _небольшим_
              переводам часов при коррекции времени по NTP).

              ^ Отмечать сдвиг можно во всех "проходных" файлах
              (clock skew mark).

   => Самое простое решение - при переводе часов писать видео в последний
      файл архива до достижения старого времени (если часы переводились
      назад).
          - так и буду делать (просто).

   __то есть__ показ видео из архива с определённого места означает, что
   мы просто находим ближайший нужный файл в структуре каталогов и
   организуем итерирование по именованным файлам, разложенным в каталоги
   (суть обход дерева).

   Также неплохо бы как-то защититься от возможных случайно-неверных
   таймстемпов из будущего, получаемых от камер (т к такое поведение
   разрушает всю навигацию по архиву). Т е это событие "перевод часов на камере".

   ...было бы логично "кадры из будущего" записывать в файлы-назначения
   и считать их реально относящимися к этим моментам времени. Но в этом случае
   логика "дописывай в последний файл, если часы отстали", не работает.
   Зато можно построить многосвязный видеоархив, в котором отражаются
   участки видео, относящиеся к разным частям непрерывной ленты.

   Выводы:
     1. Существует неопределённость, связанная с тем, что камера сама
        задаёт смещения по времени относительно момента начала захвата видео.
        Из-за этой неопределённости нельзя считать видеопоток непрерывным
        по времени. При этом возможны флуктуации в обе стороны относительно
        текущего момента.
     2. Если неопределённость из п1 распространить до уровня разбиения видео
        на файлы, то сложность навигации по архиву становится слишком высокой,
        т.к. приходится искуственно поддерживать информацию о порядке следования
        видеокадров. При строго последовательной записи порядок сохраняется
        естественным образом.
     3. Ввиду п1 и п2 единственный приемлемый подход - писать в текущий файл
        до повторной синхронизации часов. Со случайно-неверными таймстемпами
        можно справиться, введя обновление смещения по времени при резких
        скачках в таймстемпах, получаемых от камеры. Преимущества:
            * Сохраняется строгий хронологический порядок следования кадров;
            * Линейность записи;
            * Индексация видео сохраняет своё естественное значение без
              дополнительной сложной логики.

4. Способ реализации VOD в moment - ?
   Нужно делать следующее:
       1. Отдавать фрагмент видео из архива flv-файлом;
       2. Выдавать видеопоток VOD из архива по протоколу потоковой передачи видео.

       Для наглдной демонстрации нужен способ "2". Делаю handler на просмотр
       rtmp-потоков, создаю VideoStream и наполняю его видеокадрами из архива.
       НО наполнение этого потока должно производиться со скоростью показа на клиенте,
       а не со скоростью просмотра видео... Т е нужна _возможность_ ограничивать
       передачу видео не таймером, а состоянием принимающего соединения,
       т.е. клиентского Sender'а. Это означает подписку на состояние Sender'а
       в callback'е на начало просмотра - вполне нормальная слабая обратная
       связь. ...но, скорее всего, связь такого типа не подойдёт для RTMP по
       построению. Поэтому в первой реализации будет ограничение по серверному
       таймеру плюс prepush достаточной длины для компенсации разницы в
       скорости воспроизведения на сервере и на клиенте.

